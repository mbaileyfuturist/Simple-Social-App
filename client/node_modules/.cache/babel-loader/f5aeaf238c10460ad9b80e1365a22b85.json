{"ast":null,"code":"var _jsxFileName = \"/home/micheal/Documents/web-projects/Simple-Social-App/client/src/Components/UploadPhoto/UploadPhoto.js\",\n    _s = $RefreshSig$();\n\nimport classes from './UploadPhoto.module.css';\nimport { useState } from 'react';\nimport Button from '../Button/Button';\nimport { ref, getDownloadURL, uploadBytesResumable } from \"firebase/storage\";\nimport { storage } from '../../firebase';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UploadPhoto = () => {\n  _s();\n\n  const history = useHistory();\n  const myStorage = window.localStorage;\n  const id = myStorage.getItem('id');\n  const idToken = myStorage.getItem('idToken');\n  const [image, setImage] = useState(null);\n  const [file, setFile] = useState(null);\n  const [progress, setProgress] = useState(0);\n  const [uploaded, setUploaded] = useState(false);\n\n  const previewImage = event => {\n    event.preventDefault(); //This will grab our file from the input event\n\n    const file = event.target[0].files[0];\n    setImage(URL.createObjectURL(file));\n    setFile(file);\n  };\n\n  const uploadImage = () => {\n    //If file doesnt exist then do nothing.\n    if (!file) return;\n\n    if (file) {\n      //ref sets up the storage mechanism and the path to the file.\n      const storageRef = ref(storage, '/files/' + file.name); //uploadBytesResumable uploads data to the objects location.\n\n      const uploadTask = uploadBytesResumable(storageRef, file);\n      uploadTask.on('state_changed', snapShot => {\n        //Show the progress of the uploaded image\n        const progress = Math.round(snapShot.bytesTransferred / snapShot.totalBytes * 100);\n        setProgress(progress);\n      }, //If an error occures during upload, then show the error.\n      error => console.log(error), () => {\n        //This gets triggered when the download is successfully completed.\n        //The parameter takes the path of the file we want to download.\n        //The url being returned is the url, that we will need to present the photo to the user.\n        //We will need to store this under the appropriate user in our realtime database.\n        const url = getDownloadURL(uploadTask.snapshot.ref).then(url => putUrlToUser(url));\n      });\n    }\n  };\n\n  const putUrlToUser = async url => {\n    setUploaded(true);\n    const response = await axios.post('http://localhost:3001/uploadPhoto', {\n      id: id,\n      url: url\n    });\n\n    if (response.status !== 200) {\n      throw new Error('Failed to upload data.');\n    }\n  };\n\n  const navigateHome = () => {\n    history.push('/Home');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: classes.text,\n      children: \"Greate now that your registered, upload a profile picture so your friends can recognize you.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: previewImage,\n      className: classes.imageSelectorContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: classes.input,\n        type: \"file\",\n        id: \"avatar\",\n        name: \"avatar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.button,\n        value: \"Preview\",\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.imageContainer,\n      children: image ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: classes.previewImage,\n          src: image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.buttonContainer,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: classes.button,\n            value: \"Upload\",\n            onClick: uploadImage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this), progress ? /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: classes.uploadProgress,\n          children: [\"Upload progress: \", progress, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 37\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.buttonContainer,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: classes.greenButton,\n            disabled: !uploaded,\n            type: \"click\",\n            onClick: navigateHome,\n            value: \"Continue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 26\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UploadPhoto, \"ZZLMKnCIB0tSWKz2X3iDCmmNVCA=\", false, function () {\n  return [useHistory];\n});\n\n_c = UploadPhoto;\nexport default UploadPhoto;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadPhoto\");","map":{"version":3,"sources":["/home/micheal/Documents/web-projects/Simple-Social-App/client/src/Components/UploadPhoto/UploadPhoto.js"],"names":["classes","useState","Button","ref","getDownloadURL","uploadBytesResumable","storage","useHistory","axios","UploadPhoto","history","myStorage","window","localStorage","id","getItem","idToken","image","setImage","file","setFile","progress","setProgress","uploaded","setUploaded","previewImage","event","preventDefault","target","files","URL","createObjectURL","uploadImage","storageRef","name","uploadTask","on","snapShot","Math","round","bytesTransferred","totalBytes","error","console","log","url","snapshot","then","putUrlToUser","response","post","status","Error","navigateHome","push","text","imageSelectorContainer","input","button","imageContainer","buttonContainer","uploadProgress","greenButton"],"mappings":"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","sourcesContent":["import classes from './UploadPhoto.module.css'\nimport { useState } from 'react'\nimport Button from '../Button/Button'\nimport { ref, getDownloadURL, uploadBytesResumable } from \"firebase/storage\";\nimport { storage } from '../../firebase'\nimport { useHistory } from 'react-router-dom'\nimport axios from 'axios';\n\n\nconst UploadPhoto = () => {\n\n    const history = useHistory()\n\n    const myStorage = window.localStorage\n    const id = myStorage.getItem('id')\n    const idToken = myStorage.getItem('idToken')\n\n    const [image, setImage] = useState(null)\n    const [file, setFile] = useState(null)\n    const [progress, setProgress] = useState(0)\n    const [uploaded, setUploaded] = useState(false)\n\n    const previewImage = event => {\n        event.preventDefault();\n        \n        //This will grab our file from the input event\n        const file = event.target[0].files[0]\n        setImage(URL.createObjectURL(file))\n        setFile(file)\n    }\n\n    \n    const uploadImage = () => {\n\n        //If file doesnt exist then do nothing.\n        if(!file) return\n    \n        if(file){\n        \n            //ref sets up the storage mechanism and the path to the file.\n            const storageRef = ref(storage, '/files/' + file.name)\n        \n            //uploadBytesResumable uploads data to the objects location.\n            const uploadTask = uploadBytesResumable(storageRef, file)\n        \n            uploadTask.on('state_changed', (snapShot) => {\n                //Show the progress of the uploaded image\n                const progress = Math.round((snapShot.bytesTransferred / snapShot.totalBytes)*100)\n                setProgress(progress)\n            }, \n            //If an error occures during upload, then show the error.\n            error => console.log(error),\n            () => {\n                //This gets triggered when the download is successfully completed.\n                //The parameter takes the path of the file we want to download.\n                //The url being returned is the url, that we will need to present the photo to the user.\n                //We will need to store this under the appropriate user in our realtime database.\n                const url = getDownloadURL(uploadTask.snapshot.ref).then(url => putUrlToUser(url))\n            })\n        }\n    }\n\n    const putUrlToUser = async (url) => {\n        setUploaded(true)\n        const response = await axios.post('http://localhost:3001/uploadPhoto',{ id:id, url:url})\n        \n        if(response.status !== 200){\n            throw new Error('Failed to upload data.')\n        }\n\n    }\n\n    const navigateHome = () => {\n        history.push('/Home')\n    }\n\n\n    return(\n        <div>\n            <p className={classes.text}>Greate now that your registered, upload a profile picture so your friends can recognize you.</p>\n            \n            <form onSubmit={previewImage} className={classes.imageSelectorContainer}>\n                <input className={classes.input} type=\"file\" id=\"avatar\" name=\"avatar\"/>\n                <Button className={classes.button} value='Preview' type='submit' />\n            </form>\n            <div className={classes.imageContainer}>\n                {image ? (\n                    <div>\n                        <img className={classes.previewImage} src={image}/>\n                        <div className={classes.buttonContainer}>\n                            <Button className={classes.button} value='Upload' onClick={uploadImage}/>\n                        </div>\n\n                        {progress ? <h4 className={classes.uploadProgress}>Upload progress: {progress}%</h4> : <></>}\n\n                        <div className={classes.buttonContainer}>\n                        {<Button className={classes.greenButton} disabled={!uploaded} type='click' onClick={navigateHome} value='Continue'/>}\n                        </div>\n                    </div>\n                ) : <></>}\n            </div>\n        </div>\n    )\n}\n\nexport default UploadPhoto"]},"metadata":{},"sourceType":"module"}